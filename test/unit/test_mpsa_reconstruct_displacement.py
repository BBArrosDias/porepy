import numpy as np
import scipy.sparse as sps
import unittest

import porepy as pp


class MpsaReconstructDisplacement(unittest.TestCase):
    def test_cart_2d(self):
        nx = 1
        ny = 1
        g = pp.CartGrid([nx, ny], physdims=[2, 2])
        g.compute_geometry()
        g = make_true_2d(g)
        sc_top = pp.fvutils.SubcellTopology(g)

        D_g, CC = pp.numerics.fv.mpsa.reconstruct_displacement(g, sc_top, eta=0)

        D_g_known = np.array(
            [
                [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0],
                [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0.0],
                [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.0],
                [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0],
                [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0.0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0.0],
                [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0.0],
                [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0.0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.0],
                [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0],
                [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0.0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0.0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.0],
            ]
        )

        CC_known = np.array(
            [
                [1, 0.0],
                [1, 0.0],
                [1, 0.0],
                [1, 0.0],
                [1, 0.0],
                [1, 0.0],
                [1, 0.0],
                [1, 0.0],
                [0, 1.0],
                [0, 1.0],
                [0, 1.0],
                [0, 1.0],
                [0, 1.0],
                [0, 1.0],
                [0, 1.0],
                [0, 1.0],
            ]
        )

        self.assertTrue(np.all(np.abs(D_g - D_g_known) < 1e-12))
        self.assertTrue(np.all(np.abs(CC - CC_known) < 1e-12))

    def test_simplex_2d(self):
        nx = 1
        ny = 1
        g = pp.StructuredTriangleGrid([nx, ny], physdims=[1, 1])
        g.compute_geometry()
        g = make_true_2d(g)
        sc_top = pp.fvutils.SubcellTopology(g)

        D_g, CC = pp.numerics.fv.mpsa.reconstruct_displacement(g, sc_top, eta=0)
        D_g_known = np.array(
            [
                [
                    -1 / 6,
                    -1 / 3,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    -1 / 6,
                    -1 / 3,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -1 / 3,
                    -1 / 6,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -1 / 3,
                    -1 / 6,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                [
                    -1 / 12,
                    1 / 12,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1 / 12,
                    -1 / 12,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -1 / 12,
                    1 / 12,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1 / 12,
                    -1 / 12,
                    0,
                    0,
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1 / 3,
                    1 / 6,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1 / 3,
                    1 / 6,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1 / 6,
                    1 / 3,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1 / 6,
                    1 / 3,
                    0,
                    0,
                ],
                [
                    0,
                    0,
                    -1 / 6,
                    -1 / 3,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -1 / 6,
                    -1 / 3,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -1 / 3,
                    -1 / 6,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -1 / 3,
                    -1 / 6,
                    0,
                    0,
                    0,
                    0,
                ],
                [
                    0,
                    0,
                    -1 / 12,
                    1 / 12,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1 / 12,
                    -1 / 12,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -1 / 12,
                    1 / 12,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1 / 12,
                    -1 / 12,
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1 / 3,
                    1 / 6,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1 / 3,
                    1 / 6,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1 / 6,
                    1 / 3,
                    0,
                    0,
                    0,
                    0,
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1 / 6,
                    1 / 3,
                ],
            ]
        )

        CC_known = np.array(
            [
                [1, 0, 0, 0.0],
                [1, 0, 0, 0.0],
                [0, 0, 1, 0.0],
                [0, 0, 1, 0.0],
                [0.5, 0, 0.5, 0.0],
                [0.5, 0, 0.5, 0.0],
                [1, 0, 0, 0.0],
                [1, 0, 0, 0.0],
                [0, 0, 1, 0.0],
                [0, 0, 1, 0.0],
                [0, 1, 0, 0.0],
                [0, 1, 0, 0.0],
                [0, 0, 0, 1.0],
                [0, 0, 0, 1.0],
                [0, 0.5, 0, 0.5],
                [0, 0.5, 0, 0.5],
                [0, 1, 0, 0.0],
                [0, 1, 0, 0.0],
                [0, 0, 0, 1.0],
                [0, 0, 0, 1.0],
            ]
        )
        self.assertTrue(np.all(np.abs(D_g - D_g_known).A < 1e-12))
        self.assertTrue(np.all(np.abs(CC - CC_known) < 1e-12))

    def test_cart_3d(self):
        g = pp.CartGrid([1, 1, 1], physdims=[2, 2, 2])
        g.compute_geometry()
        sc_top = pp.fvutils.SubcellTopology(g)

        D_g, CC = pp.numerics.fv.mpsa.reconstruct_displacement(g, sc_top, eta=1)

        data = np.array(
            [
                -1,
                -1,
                -1,
                -1,
                1,
                1,
                1,
                1,
                -1,
                -1,
                -1,
                -1,
                1,
                1,
                1,
                1,
                -1,
                -1,
                -1,
                -1,
                1,
                1,
                1,
                1,
                -1,
                -1,
                -1,
                -1,
                1,
                1,
                1,
                1,
                -1,
                -1,
                -1,
                -1,
                1,
                1,
                1,
                1,
                -1,
                -1,
                -1,
                -1,
                1,
                1,
                1,
                1,
                -1,
                -1,
                -1,
                -1,
                1,
                1,
                1,
                1,
                -1,
                -1,
                -1,
                -1,
                1,
                1,
                1,
                1,
                -1,
                -1,
                -1,
                -1,
                1,
                1,
                1,
                1,
            ]
        )

        indices = np.array(
            [
                0,
                18,
                54,
                36,
                9,
                27,
                63,
                45,
                1,
                37,
                46,
                10,
                19,
                55,
                64,
                28,
                2,
                11,
                29,
                20,
                38,
                47,
                65,
                56,
                3,
                21,
                57,
                39,
                12,
                30,
                66,
                48,
                4,
                40,
                49,
                13,
                22,
                58,
                67,
                31,
                5,
                14,
                32,
                23,
                41,
                50,
                68,
                59,
                6,
                24,
                60,
                42,
                15,
                33,
                69,
                51,
                7,
                43,
                52,
                16,
                25,
                61,
                70,
                34,
                8,
                17,
                35,
                26,
                44,
                53,
                71,
                62,
            ]
        )

        indptr = np.array(
            [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
            ]
        )

        CC_known = np.array(
            [
                [1, 0, 0.0],
                [1, 0, 0.0],
                [1, 0, 0.0],
                [1, 0, 0.0],
                [1, 0, 0.0],
                [1, 0, 0.0],
                [1, 0, 0.0],
                [1, 0, 0.0],
                [1, 0, 0.0],
                [1, 0, 0.0],
                [1, 0, 0.0],
                [1, 0, 0.0],
                [1, 0, 0.0],
                [1, 0, 0.0],
                [1, 0, 0.0],
                [1, 0, 0.0],
                [1, 0, 0.0],
                [1, 0, 0.0],
                [1, 0, 0.0],
                [1, 0, 0.0],
                [1, 0, 0.0],
                [1, 0, 0.0],
                [1, 0, 0.0],
                [1, 0, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 1, 0.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
                [0, 0, 1.0],
            ]
        )

        D_g_known = sps.csr_matrix((data, indices, indptr))
        self.assertTrue(np.all(np.abs(D_g - D_g_known).A < 1e-12))
        self.assertTrue(np.all(np.abs(CC - CC_known) < 1e-12))


def make_true_2d(g):
    if g.dim == 2:
        g = g.copy()
        g.cell_centers = np.delete(g.cell_centers, (2), axis=0)
        g.face_centers = np.delete(g.face_centers, (2), axis=0)
        g.face_normals = np.delete(g.face_normals, (2), axis=0)
        g.nodes = np.delete(g.nodes, (2), axis=0)

    return g


if __name__ == "__main__":
    unittest.main()
